--- a/jp/ngt/rtm/render/RailPartsRendererBase.java
+++ b/jp/ngt/rtm/render/RailPartsRendererBase.java
@@ -26,45 +26,50 @@
 import org.lwjgl.opengl.GL11;
 
 @SideOnly(Side.CLIENT)
 public class RailPartsRendererBase extends TileEntityPartsRenderer<ModelSetRail> {
    protected int currentRailIndex;
-   private final FloatBuffer convBuf = FloatBuffer.wrap(new float[]{1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F});
+   private final FloatBuffer convBuf = FloatBuffer.wrap(new float[] { 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 0.0F, 0.0F,
+         0.0F, 0.0F, 1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 1.0F });
 
    public RailPartsRendererBase(String... par1) {
       super(par1);
    }
 
    public void init(ModelSetRail par1, ModelObject par2) {
       super.init(par1, par2);
    }
 
-   public void renderRail(TileEntityLargeRailCore tileEntity, int index, double par2, double par4, double par6, float par8) {
+   public void renderRail(TileEntityLargeRailCore tileEntity, int index, double par2, double par4, double par6,
+         float par8) {
       this.currentRailIndex = index;
       this.renderRailStatic(tileEntity, par2, par4, par6, par8);
       this.renderRailDynamic(tileEntity, par2, par4, par6, par8);
    }
 
    protected void renderRailStatic(TileEntityLargeRailCore tileEntity, double x, double y, double z, float par8) {
-      ScriptUtil.doScriptIgnoreError(this.getScript(), "renderRailStatic", new Object[]{tileEntity, x, y, z, par8, 0});
+      ScriptUtil.doScriptIgnoreError(this.getScript(), "renderRailStatic",
+            new Object[] { tileEntity, x, y, z, par8, 0 });
    }
 
    protected void renderRailDynamic(TileEntityLargeRailCore tileEntity, double x, double y, double z, float par8) {
-      ScriptUtil.doScriptIgnoreError(this.getScript(), "renderRailDynamic", new Object[]{tileEntity, x, y, z, par8, 0});
+      ScriptUtil.doScriptIgnoreError(this.getScript(), "renderRailDynamic",
+            new Object[] { tileEntity, x, y, z, par8, 0 });
    }
 
    protected boolean shouldRenderObject(TileEntityLargeRailCore tileEntity, String objName, int len, int pos) {
-      return ScriptUtil.doScriptIgnoreError(this.getScript(), "shouldRenderObject", new Object[]{tileEntity, objName, len, pos});
+      return (boolean) ScriptUtil.doScriptIgnoreError(this.getScript(), "shouldRenderObject",
+            new Object[] { tileEntity, objName, len, pos });
    }
 
    public void renderStaticParts(TileEntityLargeRailCore rail, double par2, double par4, double par6) {
       boolean flag = true;
       if (rail.glLists == null) {
          rail.glLists = new GLObject[rail.subRails.size() + 1];
          flag = false;
       } else if (rail.glLists.length != rail.subRails.size() + 1) {
-         for(int i = 0; i < rail.glLists.length; ++i) {
+         for (int i = 0; i < rail.glLists.length; ++i) {
             GLHelper.deleteGLList(rail.glLists[i]);
          }
 
          rail.glLists = new GLObject[rail.subRails.size() + 1];
          flag = false;
@@ -82,11 +87,12 @@
 
       if (!flag) {
          float[][] afloat = this.createRailPos(rail);
          if (afloat != null) {
             BlockPos blockpos = rail.getPos();
-            int[] aint = this.getRailBrightness(rail.getWorld(), blockpos.getX(), blockpos.getY(), blockpos.getZ(), afloat);
+            int[] aint = this.getRailBrightness(rail.getWorld(), blockpos.getX(), blockpos.getY(), blockpos.getZ(),
+                  afloat);
             FloatBuffer floatbuffer = this.createMatrix(afloat);
             GLHelper.startCompile(rail.glLists[this.currentRailIndex]);
             this.tessellateParts(rail, floatbuffer, aint, (this.modelSet).modelObj.model.getGroupObjects());
             GLHelper.endCompile();
             rail.shouldRerenderRail = false;
@@ -97,15 +103,15 @@
          }
       }
 
       if (flag) {
          RailPosition railposition = rail.getRailPositions()[0];
-         double d1 = railposition.posX - (double)railposition.blockX;
-         double d2 = railposition.posY - (double)railposition.blockY - 0.0625D;
-         double d0 = railposition.posZ - (double)railposition.blockZ;
+         double d1 = railposition.posX - (double) railposition.blockX;
+         double d2 = railposition.posY - (double) railposition.blockY - 0.0625D;
+         double d0 = railposition.posZ - (double) railposition.blockZ;
          GL11.glPushMatrix();
-         GL11.glTranslatef((float)(par2 + d1), (float)(par4 + d2), (float)(par6 + d0));
+         GL11.glTranslatef((float) (par2 + d1), (float) (par4 + d2), (float) (par6 + d0));
          this.bindTexture(this.getModelObject().textures[0].material.texture);
          GLHelper.callList(rail.glLists[this.currentRailIndex]);
          GL11.glPopMatrix();
       }
 
@@ -113,24 +119,26 @@
 
    protected float[][] createRailPos(TileEntityLargeRailCore par1) {
       float[] afloat = RailPosition.REVISION[par1.getRailPositions()[0].direction];
       RailMap[] arailmap = par1.getAllRailMaps();
       if (arailmap == null) {
-         return (float[][])null;
+         return (float[][]) null;
       } else {
          List<float[]> list = new ArrayList<>();
 
-         for(RailMap railmap : arailmap) {
-            int i = (int)(railmap.getLength() * 2.0D);
+         for (RailMap railmap : arailmap) {
+            int i = (int) (railmap.getLength() * 2.0D);
             double[] adouble = railmap.getRailPos(i, 0);
             double d0 = railmap.getStartRP().posY;
-            float f = (float)(adouble[1] - ((double)par1.getStartPoint()[0] + 0.5D + (double)afloat[0]));
-            float f1 = (float)(adouble[0] - ((double)par1.getStartPoint()[2] + 0.5D + (double)afloat[1]));
+            float f = (float) (adouble[1] - ((double) par1.getStartPoint()[0] + 0.5D + (double) afloat[0]));
+            float f1 = (float) (adouble[0] - ((double) par1.getStartPoint()[2] + 0.5D + (double) afloat[1]));
 
-            for(int j = 0; j <= i; ++j) {
+            for (int j = 0; j <= i; ++j) {
                double[] adouble1 = railmap.getRailPos(i, j);
-               float[] afloat1 = new float[]{f + (float)(adouble1[1] - adouble[1]), (float)(railmap.getRailHeight(i, j) - d0), f1 + (float)(adouble1[0] - adouble[0]), railmap.getRailRotation(i, j), -railmap.getRailPitch(i, j), railmap.getCant(i, j)};
+               float[] afloat1 = new float[] { f + (float) (adouble1[1] - adouble[1]),
+                     (float) (railmap.getRailHeight(i, j) - d0), f1 + (float) (adouble1[0] - adouble[0]),
+                     railmap.getRailRotation(i, j), -railmap.getRailPitch(i, j), railmap.getCant(i, j) };
                list.add(afloat1);
             }
          }
 
          return list.toArray(new float[list.size()][5]);
@@ -138,11 +146,11 @@
    }
 
    protected final FloatBuffer createMatrix(float[][] rp) {
       FloatBuffer floatbuffer = FloatBuffer.allocate(rp.length << 4);
 
-      for(int i = 0; i < rp.length; ++i) {
+      for (int i = 0; i < rp.length; ++i) {
          FloatBuffer floatbuffer1 = this.convBuf;
          floatbuffer1 = NGTRenderHelper.translate(floatbuffer1, rp[i][0], rp[i][1], rp[i][2]);
          floatbuffer1 = NGTRenderHelper.rotate(floatbuffer1, NGTMath.toRadians(rp[i][3]), 'Y');
          floatbuffer1 = NGTRenderHelper.rotate(floatbuffer1, NGTMath.toRadians(rp[i][4]), 'X');
          floatbuffer1 = NGTRenderHelper.rotate(floatbuffer1, NGTMath.toRadians(rp[i][5]), 'Z');
@@ -153,11 +161,11 @@
    }
 
    protected final int[] getRailBrightness(World world, int x, int y, int z, float[][] rp) {
       int[] aint = new int[rp.length];
 
-      for(int i = 0; i < rp.length; ++i) {
+      for (int i = 0; i < rp.length; ++i) {
          int j = x + NGTMath.floor(rp[i][0]);
          int k = y + NGTMath.floor(rp[i][1]);
          int l = z + NGTMath.floor(rp[i][2]);
          aint[i] = this.getBrightness(world, j, k, l);
       }
@@ -177,23 +185,25 @@
    private final int getWorldBrightness(World world, int x, int y, int z) {
       BlockPos blockpos = new BlockPos(x, y, z);
       return world.isBlockLoaded(blockpos) ? world.getCombinedLight(blockpos, 0) : 0;
    }
 
-   private final void tessellateParts(TileEntityLargeRailCore tileEntity, FloatBuffer matrix, int[] brightness, List<GroupObject> gObjList) {
+   private final void tessellateParts(TileEntityLargeRailCore tileEntity, FloatBuffer matrix, int[] brightness,
+         List<GroupObject> gObjList) {
       IRenderer irenderer = PolygonRenderer.INSTANCE;
       irenderer.startDrawing(4);
       int i = matrix.capacity() >> 4;
 
-      for(int j = 0; j < i; ++j) {
+      for (int j = 0; j < i; ++j) {
          irenderer.setBrightness(brightness[j]);
 
-         for(int k = 0; k < gObjList.size(); ++k) {
-            GroupObject groupobject = (GroupObject)gObjList.get(k);
-            if ((!groupobject.name.startsWith("side") || j == 0 || j == i - 1) && this.shouldRenderObject(tileEntity, groupobject.name, i, j)) {
-               for(int l = 0; l < groupobject.faces.size(); ++l) {
-                  Face face = (Face)groupobject.faces.get(l);
+         for (int k = 0; k < gObjList.size(); ++k) {
+            GroupObject groupobject = (GroupObject) gObjList.get(k);
+            if ((!groupobject.name.startsWith("side") || j == 0 || j == i - 1)
+                  && this.shouldRenderObject(tileEntity, groupobject.name, i, j)) {
+               for (int l = 0; l < groupobject.faces.size(); ++l) {
+                  Face face = (Face) groupobject.faces.get(l);
                   NGTRenderHelper.addFaceWithMatrix(face, irenderer, matrix, j, false);
                }
             }
          }
       }
@@ -203,52 +213,101 @@
 
    public String[] getAllObjNames() {
       List<GroupObject> list = this.modelObj.model.getGroupObjects();
       String[] astring = new String[list.size()];
 
-      for(int i = 0; i < astring.length; ++i) {
-         astring[i] = ((GroupObject)list.get(i)).name;
+      for (int i = 0; i < astring.length; ++i) {
+         astring[i] = ((GroupObject) list.get(i)).name;
       }
 
       return astring;
    }
 
    public boolean isSwitchRail(TileEntityLargeRailCore tileEntity) {
       return tileEntity.getAllRailMaps().length > 1;
    }
 
-   public void renderRailMapStatic(TileEntityLargeRailSwitchCore tileEntity, RailMap rm, int max, int startIndex, int endIndex, Parts... pArray) {
+   public void renderRailMapStatic(TileEntityLargeRailSwitchCore tileEntity, RailMap rm, int max, int startIndex,
+         int endIndex, Parts... pArray) {
       double[] adouble = rm.getRailPos(max, 0);
       double d0 = rm.getRailHeight(max, 0);
       int[] aint = tileEntity.getStartPoint();
       float[] afloat = RailPosition.REVISION[tileEntity.getRailPositions()[0].direction];
-      float f = (float)(adouble[1] - ((double)aint[0] + 0.5D + (double)afloat[0]));
-      float f1 = (float)(adouble[0] - ((double)aint[2] + 0.5D + (double)afloat[1]));
+      float f = (float) (adouble[1] - ((double) aint[0] + 0.5D + (double) afloat[0]));
+      float f1 = (float) (adouble[0] - ((double) aint[2] + 0.5D + (double) afloat[1]));
 
-      for(int i = startIndex; i <= endIndex; ++i) {
+      for (int i = startIndex; i <= endIndex; ++i) {
          double[] adouble1 = rm.getRailPos(max, i);
          double d1 = rm.getRailHeight(max, i);
-         float f2 = f + (float)(adouble1[1] - adouble[1]);
-         float f3 = (float)(d1 - d0);
-         float f4 = f1 + (float)(adouble1[0] - adouble[0]);
+         float f2 = f + (float) (adouble1[1] - adouble[1]);
+         float f3 = (float) (d1 - d0);
+         float f4 = f1 + (float) (adouble1[0] - adouble[0]);
          float f5 = rm.getRailRotation(max, i);
          float f6 = rm.getRailPitch(max, i);
-         this.setBrightness(this.getBrightness(tileEntity.getWorld(), NGTMath.floor(adouble[1] + (double)f2), tileEntity.getPos().getY(), NGTMath.floor(adouble[0] + (double)f4)));
+         this.setBrightness(this.getBrightness(tileEntity.getWorld(), NGTMath.floor(adouble[1] + (double) f2),
+               tileEntity.getPos().getY(), NGTMath.floor(adouble[0] + (double) f4)));
          GL11.glPushMatrix();
          GL11.glTranslatef(f2, f3, f4);
          GL11.glRotatef(f5, 0.0F, 1.0F, 0.0F);
          GL11.glRotatef(-f6, 1.0F, 0.0F, 0.0F);
 
-         for(int j = 0; j < pArray.length; ++j) {
+         for (int j = 0; j < pArray.length; ++j) {
             pArray[j].render(this);
          }
 
          GL11.glPopMatrix();
       }
 
    }
 
+   public void renderRailMapStaticForNormRails(TileEntityLargeRailCore tileEntity, RailMap rm, int max, int startIndex,
+         int endIndex, boolean enableCant, boolean shouldCantRaiseUp, float[] translate, float[] rotate,
+         Parts... pArray) {
+      double[] origPos = rm.getRailPos(max, 0);
+      double origHeight = rm.getRailHeight(max, 0);
+      int[] startPos = tileEntity.getStartPoint();
+      float[] revXZ = RailPosition.REVISION[tileEntity.getRailPositions()[0].direction];
+      float moveX = (float) (origPos[1] - ((double) startPos[0] + 0.5D + (double) revXZ[0]));
+      float moveZ = (float) (origPos[0] - ((double) startPos[2] + 0.5D + (double) revXZ[1]));
+
+      for (int i = startIndex; i <= endIndex; ++i) {
+         double[] p1 = rm.getRailPos(max, i);
+         double h = rm.getRailHeight(max, i);
+         float x0 = moveX + (float) (p1[1] - origPos[1]);
+         float y0 = (float) (h - origHeight);
+         float z0 = moveZ + (float) (p1[0] - origPos[0]);
+         float yaw = rm.getRailRotation(max, i);
+         float pitch = rm.getRailPitch(max, i);
+         float cant = rm.getCant(max, i);
+         float cantRaiseUp = (float) Math.abs(0.5F * Math.tan(cant * Math.PI / 180));
+         this.setBrightness(this.getBrightness(tileEntity.getWorld(),
+               NGTMath.floor(origPos[1] + x0), tileEntity.getPos().getY(), NGTMath.floor(origPos[0] + z0)));
+         GL11.glPushMatrix();
+         GL11.glTranslatef(x0, y0, z0);
+         GL11.glRotatef(yaw, 0.0F, 1.0F, 0.0F);
+         if (enableCant)
+            GL11.glRotatef(cant, 0.0F, 0.0F, 1.0F);
+         if (shouldCantRaiseUp)
+            GL11.glTranslatef(0.0F, cantRaiseUp, 0.0F);
+
+         if (startIndex == endIndex) {
+            if (translate[0] != 0.0F || translate[1] != 0.0F || translate[2] != 0.0F) {
+               GL11.glTranslatef(translate[0], translate[1], translate[2]);
+
+            }
+            if (rotate[0] != 0.0F || rotate[1] != 0.0F || rotate[2] != 0.0F || rotate[3] != 0.0F) {
+               GL11.glRotatef(rotate[0], rotate[1], rotate[2], rotate[3]);
+            }
+         }
+         GL11.glRotatef(-pitch, 1.0F, 0.0F, 0.0F);
+         for (int j = 0; j < pArray.length; ++j) {
+            pArray[j].render(this);
+         }
+         GL11.glPopMatrix();
+      }
+   }
+
    public ModelObject getModelObject() {
       return (this.modelSet).modelObj;
    }
 
    public void setBrightness(int par1) {
@@ -256,22 +315,22 @@
    }
 
    protected void renderRailPosArray(RailPosition[] rps, RailMap[] rms) {
       GL11.glDisable(3553);
       GLHelper.disableLighting();
-      float f = (float)NGTUtilClient.getMinecraft().displayHeight * 0.005F;
+      float f = (float) NGTUtilClient.getMinecraft().displayHeight * 0.005F;
       float f1 = GL11.glGetFloat(2849);
       GL11.glLineWidth(f);
       double d0 = rps[0].posX;
       double d1 = rps[0].posY;
       double d2 = rps[0].posZ;
 
-      for(RailPosition railposition : rps) {
+      for (RailPosition railposition : rps) {
          this.renderRailPos(railposition, d0, d1, d2);
       }
 
-      for(RailMap railmap : rms) {
+      for (RailMap railmap : rms) {
          this.renderRailMap(railmap, d0, d1, d2);
       }
 
       GL11.glLineWidth(f1);
       GLHelper.enableLighting();
@@ -279,11 +338,11 @@
    }
 
    private void renderRailPos(RailPosition rp, double sx, double sy, double sz) {
       float f = 2.0F;
       GL11.glPushMatrix();
-      GL11.glTranslatef((float)(rp.posX - sx), (float)(rp.posY - sy), (float)(rp.posZ - sz));
+      GL11.glTranslatef((float) (rp.posX - sx), (float) (rp.posY - sy), (float) (rp.posZ - sz));
       RenderMarkerBlock.renderLine(0.0F, 0.0F, 0.0F, 0.0F, f, 0.0F, 16711680);
       GL11.glPushMatrix();
       GL11.glRotatef(rp.anchorYaw, 0.0F, 1.0F, 0.0F);
       RenderMarkerBlock.renderLine(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, rp.anchorLengthHorizontal, 16711680);
       GL11.glPushMatrix();
@@ -299,22 +358,23 @@
       GL11.glPopMatrix();
    }
 
    private void renderRailMap(RailMap rm, double sx, double sy, double sz) {
       GL11.glPushMatrix();
-      GL11.glTranslatef((float)(rm.getStartRP().posX - sx), (float)(rm.getStartRP().posY - sy), (float)(rm.getStartRP().posZ - sz));
-      int i = (int)(rm.getLength() * 2.0D);
+      GL11.glTranslatef((float) (rm.getStartRP().posX - sx), (float) (rm.getStartRP().posY - sy),
+            (float) (rm.getStartRP().posZ - sz));
+      int i = (int) (rm.getLength() * 2.0D);
       double[] adouble = rm.getRailPos(i, 0);
       double d0 = rm.getStartRP().posY;
-      float f = (float)(adouble[1] - sx);
-      float f1 = (float)(adouble[0] - sz);
+      float f = (float) (adouble[1] - sx);
+      float f1 = (float) (adouble[0] - sz);
 
-      for(int j = 0; j <= i; ++j) {
+      for (int j = 0; j <= i; ++j) {
          double[] adouble1 = rm.getRailPos(i, j);
-         float f2 = f + (float)(adouble1[1] - adouble[1]);
-         float f3 = (float)(rm.getRailHeight(i, j) - d0);
-         float f4 = f1 + (float)(adouble1[0] - adouble[0]);
+         float f2 = f + (float) (adouble1[1] - adouble[1]);
+         float f3 = (float) (rm.getRailHeight(i, j) - d0);
+         float f4 = f1 + (float) (adouble1[0] - adouble[0]);
          RenderMarkerBlock.renderLine(f2, f3, f4, f2, f3 + 1.5F, f4, 65280);
       }
 
       GL11.glPopMatrix();
    }
